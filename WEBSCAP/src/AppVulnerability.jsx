import Navbar from "./components/Navbar";
import Footer from "./components/Footer";
import CardVulnerability from "./components/CardVulnerability";
import axios from "axios";
import { useEffect, useState, useMemo } from "react";
import { useLocation } from 'react-router-dom';

function AppVulnerability() {
  const [ConformityData, setConformityData] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [filter, setFilter] = useState('All');
  const [sortConfig, setSortConfig] = useState({ key: 'rule', direction: 'ascending' });
  const [hideNonPatched, setHideNonPatched] = useState(false);
  const location = useLocation();
  const { id, serveur, formattedDate, nb_vuln } = location.state || {};

  const backendUrl = import.meta.env.VITE_BACKEND_URL; // Utilisation de la variable d'environnement

  const summary = useMemo(() => {
    const total = ConformityData.length; // Total global, toutes les entrées
    const ImportantCount = ConformityData.filter(item => item.patch === 1 && item.severity === 'Important').length;
    const ModerateCount = ConformityData.filter(item => item.patch === 1 && item.severity === 'Moderate').length;
    const LowCount = ConformityData.filter(item => item.patch === 1 && item.severity === 'Low').length;

    return { total, ImportantCount, ModerateCount, LowCount };
  }, [ConformityData]);


  const fetchData = async () => {
    try {
      setIsLoading(true);
      const response = await axios.get(`${backendUrl}/api/vulnerability/${id}`);
      setConformityData(response.data);
    } catch (error) {
      console.error("Erreur lors de la récupération des données :", error);
    } finally {
      setIsLoading(false);
    }
  };

  const sortedData = useMemo(() => {
    let sortableData = [...ConformityData];
    if (sortConfig.key !== null) {
      sortableData.sort((a, b) => {
        if (sortConfig.key === 'cvss') {
          // Extraire les scores numériques des chaînes CVSS
          const aScore = parseFloat(a.cvss.match(/\d+\.\d+/)?.[0] || '0');
          const bScore = parseFloat(b.cvss.match(/\d+\.\d+/)?.[0] || '0');
          return sortConfig.direction === 'ascending' ? aScore - bScore : bScore - aScore;
        }
        // Reste du code de tri pour les autres colonnes...
      });

    }
    return sortableData;
  }, [ConformityData, sortConfig]);

  const filteredData = useMemo(() => {
    let dataToFilter = sortedData;

    // Appliquer le filtre de gravité
    if (filter !== 'All') {
      dataToFilter = dataToFilter.filter(item => item.severity === filter);
    }

    // Appliquer le filtre pour masquer les entrées où patch === 0
    if (hideNonPatched) {
      dataToFilter = dataToFilter.filter(item => item.patch === 1);
    }

    return dataToFilter;
  }, [sortedData, filter, hideNonPatched]);

  const handleSort = (key) => {
    setSortConfig((prevConfig) => {
      if (prevConfig.key === key) {
        // Si la colonne est déjà triée, inverser la direction
        return { key, direction: prevConfig.direction === 'ascending' ? 'descending' : 'ascending' };
      }
      // Si une nouvelle colonne est sélectionnée, trier par défaut en ascendant
      return { key, direction: 'ascending' };
    });
  };



  useEffect(() => {
    if (id) {
      fetchData();
    } else {
      console.error("Aucun ID trouvé.");
    }
  }, [id]);

  return (
    <main className="main-content">
      <Navbar />
      <section className="flex-grow-0">
        <h2 className="title-header">
          {serveur}
          <div className="text-sm mt-2 w-full flex justify-between"> {/* Flexbox avec espacement entre les éléments */}
            <span style={{ width: "30%" }}>Test : {formattedDate} </span>
            <span className="text-2xl border-2 border-gray-400 bg-yellow-100 p-4 rounded-md">Vulnerability : {nb_vuln}
              <br />
              <span className="text-red-600 text-[16px]">Important: {summary.ImportantCount}</span>
              <span className="text-orange-600 text-[16px]"> Moderate: {summary.ModerateCount}</span>
              <span className="text-yellow-500 text-[16px]"> Low: {summary.LowCount}</span>

            </span>
            <span className="text-2xl" style={{ width: "30%" }}>Vulnerability checked: {summary.total}</span>
          </div>
        </h2>
        <div className="mb-2">

          <button
            onClick={() => setFilter('All')}
            className="mr-2 px-4 py-2 bg-gray-500 text-white rounded"
          >
            All
          </button>
          <button
            onClick={() => setFilter('Important')}
            className="mr-2 px-4 py-2 bg-red-600 text-white rounded"
          >
            Important
          </button>
          <button
            onClick={() => setFilter('Moderate')}
            className="mr-2 px-4 py-2 bg-orange-500 text-white rounded"
          >
            Moderate
          </button>
          <button
            onClick={() => setFilter('Low')}
            className="px-4 py-2 bg-yellow-500 text-white rounded"
          >
            Low
          </button>
          <button
            onClick={() => setHideNonPatched((prev) => !prev)} // Bascule
            className={`ml-4 px-4 py-2 ${hideNonPatched ? 'bg-green-600' : 'bg-gray-400'} text-white rounded`}
          >
            {hideNonPatched ? 'Print all' : 'Hide'}
          </button>
        </div>
      </section>

      {isLoading ? (
        <p>Loading data...</p>
      ) : filteredData.length > 0 ? (
        <div className="border-2 rounded-xl customShadow overflow-hidden p-4 principal mt-0">
          <table className="table-fixed w-full border-collapse">
            <thead className="bg-gray-200 sticky top-0 z-10">
              <tr>

                <th className="border border-gray-400 px-4 py-2 w-[400px] cursor-pointer"
                  onClick={() => handleSort('titre')}
                >
                  Titre
                  <span className="ml-2">
                    {sortConfig.key === 'titre' && (
                      <span>{sortConfig.direction === 'ascending' ? '↑' : '↓'}</span>
                    )}
                  </span>
                </th>
                <th className="border border-gray-400 px-4 py-2 w-[100px]">
                  Vulnerable
                </th>
                <th className="border border-gray-400 px-4 py-2 w-[120px] cursor-pointer"
                  onClick={() => handleSort('severity')}
                >
                  Gravity
                  <span className="ml-2">
                    {sortConfig.key === 'severity' && (
                      <span>{sortConfig.direction === 'ascending' ? '↑' : '↓'}</span>
                    )}
                  </span>
                </th>
                <th className="border border-gray-400 px-4 py-2 w-[100px] cursor-pointer"
                  onClick={() => handleSort('cvss')}
                >
                  CVSS
                  <span className="ml-2">
                    {sortConfig.key === 'cvss' && (
                      <span>{sortConfig.direction === 'ascending' ? '↑' : '↓'}</span>
                    )}
                  </span>
                </th>
                <th className="border border-gray-400 px-4 py-2 w-[200px]">
                  CVE references
                </th>
                <th className="border border-gray-400 px-4 py-2 w-[120px]">
                </th>
              </tr>
            </thead>
            <tbody>
              {filteredData.map((data) => (
                <CardVulnerability key={data.id} EvaluationData={data} />
              ))}
            </tbody>
          </table>
        </div>
      ) : (
        <p>No data for this ID.</p>
      )}

      <Footer />
    </main>
  );
}

export default AppVulnerability;

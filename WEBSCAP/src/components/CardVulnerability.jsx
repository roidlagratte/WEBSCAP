import PropTypes from "prop-types";
import { useState } from "react";

export default function CardVulnerability({ EvaluationData = { id: "0", titre: "na", severity: "na", cvss: "na", description: "na", reference: "na", patch: 1 } }) {

    // LA LOGIQUE
    const { id, titre, severity, description, reference, patch, cvss } = EvaluationData;
    const [isExpanded, setIsExpanded] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const truncatedDescription = (description || "na").length > 200
        ? `${(description || "na").slice(0, 200)}...`
        : (description || "na");

    const getSeverityStyle = (severity) => {
        switch (severity) {
            case "Important":
                return "text-red-500 font-bold";
            case "Moderate":
                return "text-orange-500 font-bold";
            case "Low":
                return "text-yellow-500 font-bold";
            default:
                return "text-black";
        }
    };

    const interpretCVSS = (cvssString) => {
        if (!cvssString) return [];

        const matches = cvssString.match(/CVSS:3.1\/([^[\]]+)/g);
        if (!matches) return [];

        return matches.map(match => {
            const parts = match.replace('CVSS:3.1/', '').split('/');
            const result = {};
            parts.forEach(part => {
                const [key, value] = part.split(':');
                result[key] = value;
            });

            // Valeurs des métriques CVSS 3.1
            const metricValues = {
                AV: { N: 0.85, A: 0.62, L: 0.55, P: 0.2 },
                AC: { L: 0.77, H: 0.44 },
                PR: { N: 0.85, L: result.S === 'C' ? 0.68 : 0.62, H: result.S === 'C' ? 0.50 : 0.27 },
                UI: { N: 0.85, R: 0.62 },
                C: { N: 0, L: 0.22, H: 0.56 },
                I: { N: 0, L: 0.22, H: 0.56 },
                A: { N: 0, L: 0.22, H: 0.56 }
            };

            // Calcul de l'exploitabilité
            const exploitability = 8.22 *
                metricValues.AV[result.AV] *
                metricValues.AC[result.AC] *
                metricValues.PR[result.PR] *
                metricValues.UI[result.UI];

            // Calcul du sous-score d'impact (ISS)
            const iss = 1 - ((1 - metricValues.C[result.C]) * (1 - metricValues.I[result.I]) * (1 - metricValues.A[result.A]));

            // Calcul de l'impact
            let impact = 0;
            if (result.S === 'U') {
                impact = 6.42 * iss; // Scope Unchanged
            } else {
                impact = 7.52 * (iss - 0.029) - (3.25 * Math.pow((iss * 0.9731 - 0.02), 13)); // Scope Changed
            }

            // Calcul du Base Score
            let baseScore = 0;
            if (impact <= 0) {
                baseScore = 0;
            } else if (result.S === 'U') {
                baseScore = Math.min(impact + exploitability, 10);
            } else {
                baseScore = Math.min(1.08 * (impact + exploitability), 10);
            }

            result.baseScore = Math.round(baseScore * 10) / 10; // Arrondi final

            return result;
        });
    };

    const renderCVSSScore = (cvssDataArray) => {
        if (!cvssDataArray || cvssDataArray.length === 0) return <span>N/A</span>;
        return cvssDataArray[0].baseScore ? cvssDataArray[0].baseScore.toFixed(1) : 'N/A';
    };

    const renderFullCVSSTable = (cvssDataArray) => {
        if (!cvssDataArray || cvssDataArray.length === 0) return <span>N/A</span>;

        const getColorClass = (key, value) => {
            if (['C', 'I', 'A'].includes(key)) {
                switch (value) {
                    case 'H': return 'bg-red-500 text-white';
                    case 'M': return 'bg-yellow-500';
                    case 'L': return 'bg-green-500 text-white';
                    default: return 'bg-gray-200';
                }
            }
            if (['AV'].includes(key)) {
                switch (value) {
                    case 'N': return 'bg-red-500 text-white';
                    case 'A': return 'bg-orange-500 text-black';
                    case 'L': return 'bg-yellow-300 text-black';
                    default: return 'bg-gray-200';
                }
            }

            if (['AC'].includes(key)) {
                switch (value) {
                    case 'L': return 'bg-red-500 text-white';
                    case 'H': return 'bg-yellow-300 text-black';
                    default: return 'bg-gray-200';
                }
            }
            if (['PR'].includes(key)) {
                switch (value) {
                    case 'N': return 'bg-red-500 text-white';
                    case 'L': return 'bg-orange-500 text-black';
                    case 'H': return 'bg-yellow-300 text-black';
                    default: return 'bg-gray-200';
                }
            }
            if (['UI'].includes(key)) {
                switch (value) {
                    case 'N': return 'bg-red-500 text-white';
                    case 'R': return 'bg-yellow-500';
                    default: return 'bg-gray-200';
                }
            }
            return 'bg-gray-200'; // Couleur par défaut pour les autres métriques
        };

        const metrics = [
            { key: 'AV', name: 'Attack Vector' },
            { key: 'AC', name: 'Attack Complexity' },
            { key: 'PR', name: 'Privileges Required' },
            { key: 'UI', name: 'User Interaction' },
            { key: 'S', name: 'Scope' },
            { key: 'C', name: 'Confidentiality' },
            { key: 'I', name: 'Integrity' },
            { key: 'A', name: 'Availability' }
        ];

        return (
            <div className="w-full">
                <table className="w-full text-xs">
                    <thead>
                        <tr>
                            <th className="border px-1 py-1"></th>
                            {/* Ajouter les colonnes pour chaque cvssDataArray */}
                            {cvssDataArray.map((cvssData, index) => (
                                <th key={index} className="border px-2 py-1 font-bold">CVSS {index + 1}</th>
                            ))}
                        </tr>
                    </thead>
                    <tbody>
                        {metrics.map(metric => (
                            <tr key={metric.key}>
                                {/* Afficher le nom de la métrique dans la première colonne */}
                                <td className="border px-1 py-1 font-bold">{metric.name}</td>
                                {/* Remplir les cellules avec les valeurs correspondantes de chaque cvssData */}
                                {cvssDataArray.map((cvssData, index) => (
                                    <td key={index} className={`border px-2 py-1 text-center ${getColorClass(metric.key, cvssData[metric.key])}`}>
                                        {metric.key === 'AV'
                                            ? (cvssData[metric.key] === 'N' ? 'Network'
                                                : cvssData[metric.key] === 'A' ? 'Adjacent'
                                                    : cvssData[metric.key] === 'L' ? 'Local'
                                                        : cvssData[metric.key])
                                            : metric.key === 'AC'
                                                ? (cvssData[metric.key] === 'L' ? 'Low'
                                                    : cvssData[metric.key] === 'H' ? 'High'
                                                        : cvssData[metric.key])
                                                : metric.key === 'PR'
                                                    ? (cvssData[metric.key] === 'N' ? 'None'
                                                        : cvssData[metric.key] === 'L' ? 'Low'
                                                            : cvssData[metric.key] === 'H' ? 'High'
                                                                : cvssData[metric.key])
                                                    : metric.key === 'UI'
                                                        ? (cvssData[metric.key] === 'N' ? 'None'
                                                            : cvssData[metric.key] === 'R' ? 'Required'
                                                                : cvssData[metric.key])
                                                        : metric.key === 'S'
                                                            ? (cvssData[metric.key] === 'U' ? 'Unchanged'
                                                                : cvssData[metric.key] === 'C' ? 'Changed'
                                                                    : cvssData[metric.key])
                                                            : metric.key === 'C' || metric.key === 'I' || metric.key === 'A'
                                                                ? cvssData[metric.key] === 'H' ? 'high'
                                                                    : cvssData[metric.key] === 'L' ? 'low'
                                                                        : cvssData[metric.key] === 'N' ? 'none'
                                                                            : cvssData[metric.key]
                                                                : cvssData[metric.key]
                                        }
                                    </td>
                                ))}
                            </tr>
                        ))}
                        {/* Ajouter une ligne pour le score CVSS */}
                        <tr>
                            <td className="border px-2 py-1 font-bold">CVSS Score</td>
                            {cvssDataArray.map((cvssData, index) => (
                                <td key={index} className="border px-2 py-1 text-center font-bold">
                                    {cvssData.baseScore ? cvssData.baseScore.toFixed(1) : 'N/A'}
                                </td>
                            ))}
                        </tr>
                    </tbody>
                </table>
            </div>
        );
    };

    // Fonction pour formater la référence avec des sauts de ligne
    const formatReferenceWithLineBreaks = (ref) => {
        return ref.replace(/\]\[/g, ']\n[');
    };

    const countReferenceBlocks = (ref) => {
        const matches = ref.match(/\[CVE.*?\]/g);
        return matches ? matches.length : 0;
    };

    const rowStyle = patch === 0 ? "bg-gray-300 text-gray-500" : "";
    const openModal = () => {
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
    };
    return (
        <>
            <tr key={id} className={`text-center ${rowStyle}`}>
                <td className="px-4 py-2">{titre}</td>
                <td className="px-4 py-2">{patch === 1 ? "OUI" : "NON"}</td>
                <td className={`px-4 py-2 ${getSeverityStyle(severity)}`}>{severity}</td>
                <td className="px-4 py-2 relative flex items-center justify-center">
                    <span>{renderCVSSScore(interpretCVSS(cvss))}</span>
                    <button onClick={openModal} className="text-blue-500 hover:text-blue-700 ml-2">
                        <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-1a1 1 0 011-1h2m4 0a4 4 0 00-8 0v1a4 4 0 008 0z"></path>
                        </svg>
                    </button>
                    {isModalOpen && (
                        <div className="fixed top-0 left-0 w-full h-full bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
                            <div className="bg-white p-4 rounded-lg shadow-xl relative overflow-auto max-h-[80vh] max-w-[90vw]" onClick={closeModal}>
                                <div className="w-full">{renderFullCVSSTable(interpretCVSS(cvss))}</div>
                            </div>
                        </div>
                    )}

                </td>
                <td
                    className="px-4 py-2 relative"
                >
                    <span>{countReferenceBlocks(reference)} référence(s)</span>

                </td>
                {patch === 1 && (
                    <td className="px-4 py-2">
                        <button
                            onClick={() => setIsExpanded(!isExpanded)}
                            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded"
                        >
                            {isExpanded ? 'Reduce' : 'Description'}
                        </button>
                    </td>
                )}
            </tr>
            {/* Affichage conditionnel de la description */}
            {isExpanded && (
                <tr>
                    <td colSpan="6" className="px-4 py-2 bg-gray-100">
                        <div className="text-left">
                            <p className="font-bold">Description:</p>
                            <p>{description}</p>
                        </div>
                    </td>
                </tr>
            )}
        </>
    );
}

CardVulnerability.propTypes = {
    EvaluationData: PropTypes.shape({
        id: PropTypes.number.isRequired,
        titre: PropTypes.string,
        severity: PropTypes.string,
        cvss: PropTypes.string,
        description: PropTypes.string,
        reference: PropTypes.string,
        patch: PropTypes.number,
    }).isRequired,
}
